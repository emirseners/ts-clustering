API Reference
=============

Welcome to the API Reference section. Here you'll find detailed documentation for the main public API of the Time Series Clustering library.

**Main Public API:**

The following functions and classes are available for end users:

* :func:`simgon.import_data` - Import time series data from .xlsx or .csv files
* :func:`simgon.import_from_pysd` - Import and run Vensim models with parameter sets
* :func:`simgon.cluster` - Main clustering function for time series data
* :class:`simgon.Cluster` - Container class for clustering results

**Distance Metrics Available:**

The cluster function supports various distance metrics through the `distance` parameter:

**Pattern-based distances:**
* `'pattern'` - Pattern distance using behavioral features
* `'pattern_dtw'` - Pattern distance with Dynamic Time Warping (default)
* `'dtw'` - Dynamic Time Warping distance

**Standard distance metrics:**
* `'euclidean'` - Euclidean distance (L2 norm)
* `'manhattan'` / `'cityblock'` - Manhattan distance (L1 norm)
* `'mse'` / `'sse'` / `'sqeuclidean'` - Squared Euclidean distance
* `'triangle'` / `'cosine'` - Cosine distance
* `'correlation'` - Correlation distance
* `'chebyshev'` - Chebyshev distance (Lâˆž norm)
* `'canberra'` - Canberra distance
* `'braycurtis'` - Bray-Curtis distance
* `'hamming'` - Hamming distance
* `'jaccard'` - Jaccard distance
* `'minkowski'` - Minkowski distance (with p parameter)
* `'mahalanobis'` - Mahalanobis distance
* `'seuclidean'` - Standardized Euclidean distance
* `'dice'` - Dice distance
* `'jensenshannon'` - Jensen-Shannon distance
* `'kulczynski1'` - Kulczynski 1 distance
* `'rogerstanimoto'` - Rogers-Tanimoto distance
* `'russellrao'` - Russell-Rao distance
* `'sokalmichener'` - Sokal-Michener distance
* `'sokalsneath'` - Sokal-Sneath distance
* `'yule'` - Yule distance

**Advanced Usage:**

For advanced usage with custom parameters, use the `distance='scipy'` option:

.. code-block:: python

    # Minkowski distance with p=3
    cluster(data, distance='scipy', metric='minkowski', p=3)
    
    # Mahalanobis distance with custom covariance matrix
    cluster(data, distance='scipy', metric='mahalanobis', VI=cov_matrix)
    
    # Any other scipy metric with custom parameters
    cluster(data, distance='scipy', metric='your_metric', **kwargs)

**Note:** Internal implementation details (behavior splitting, distance calculations, plotting) are not exposed in the public API. For detailed implementation information, please refer to the source code repository.

.. toctree::
   :maxdepth: 2
   :caption: API Modules:

   clusterer
